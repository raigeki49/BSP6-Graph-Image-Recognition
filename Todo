"Solve" the issue of line detection for whiteboard by randomizing the parameters of HoughLinesP and merge the results inside the same graph/adjacency list


d = dict()
- Randomize parameters, get a list of detected edges e[i]
- increment a counter for e.g. d[tuple(e[i])] += 1
  i.e. keep track of how many times each edge is detected
- remove any edge with a score lower than some threshold (to be determined)







-----------------------------------------------------------
Goals for OpenCV parsing:

1) How do we detect lines and circles with openCV
1.1) Getting coordinates of the pixels in each detected object (?)
1.2) Add visualization of the detected circle/lines

- Mini-tutorial on openCV ? Explain (some of) the parameters (for example).

First we can assume planar graph, no intersecting edges etc. 
2) Determine which circles (= vertices) are connected to each other with a line (= edge)
   -> Worst case, can probably just check pixel coordinates to see which ones are next to each other


Then we are going to allow more stuff for the graph picture, and look for solutions to handle it
- Edges can touch near the vertices (like when we needed edge-splitting)
  => Do we need to do anything to handle this ? 

- Allow non-planar graphs (but still straight lines edges)
  => How to detect intersections between two edges (if need) and get the resulting lines

Main objective: Parse an image obtained by taking a picture of a graph on the whiteboard


============================================================


- What if edges are not straight lines, but zigzag lines ?

- Could we use this to solve (wire) labyrinths ?


XX) What if edges are not straight lines (curvy lines) ?

XX) Bonus objective:
What if the whole graph is only one color (both vertices and edges are the same color) ?





-----------------------------------------------------------
Hints for the report:

Explain how annoying it was to detect circle
(maybe) show an exmaple of the result if you don't remove the edges
then explain that you need to erode + dillate
if some parameters don't seem to matter, write

explain that not removing edges work for simple graphs but breaks for bubble graphs

Say that it takes a lot of time to find the proper parameters for a given image, and that it might need adjustment for other images


about parameters in opencv:
- documentation rather unclear
- still some parameters that have a clear purpose, e.g. min/max radius, but implies previous knowledge about the image
- overall, need to choose parameters for each image


===========================================================
Scientific Part:
1) General structure of the algorithm
idea: a) detect "objects" -> b) identify which type of object -> c) identify how/if each object is connected to another
in homemade: a) done by iterating through the whole image b) check circles (how), if not circle, then edge c) neighboring pixels
in opencv version: a & b are done at the same time (kinda) for circles, and then for edges
Technically, last step: verify that it's correct (assuming you have the solution). 
How ? -> graph isophorphisms

2) Graph isomoprhisms
2.1)definition of graph and graph ismorphism (formal and informal)
 + example (tikz) : 2 small graphs (5-6 vertices), change the label *and* the palcement of the vertices *and* give the isomorphism
if F is the isomorphism, then something like F(1) = B, F(2) = C etc. 

2.2) How to check if 2 graphs are isomorphic ?
In general, hard problem, so first thing to do is use hueristics
Order, the number of vertices
Size, the number of edges
degree sequence
Number of connected components
try to explain why these are invariants

these are very simple heuristics, we also implemented a very common and reliable one called the WeisfeilerLehman algorithm
just give pseudo code, no proof about why it works


magic time: these are just heuristics, still need to be sure but it's very complicated to do => glasgow



Technical Part:

for each "thing", give 
pseudo code
high level explanations 
main issues/thing to pay attention to (e.g. parameters)

About benchmarks:
For the homemade version, try to give a table with at least
dimension of the image, number of vertices, number of edges, timing
and go through the computer generated images that I gave you over time (for the ones where you don't have the solution, just write the detected number of edges/vertices along with an asterisk to indicate that it's the number of detected edges/vertices
Can abort if it goes over like an hour or so, and then just write in the table that it would take more than an hour

For OpenCV, since it doesn't work on many images, just a few timings on the images where it works is enough, and showcase how some stuff make it slower/faster (e.g. increasing the number of iterations in detectEdges, size of the image too maybe

1) Homemade algorithm
1.1) Detecting "objects"
1.2) Detecting what is a circle
1.3) Detecting what is an edge (everything that isn't a circle) + edge splitting and why we needed it
1.4) Detecting connections (rather simple here because we just need to check objects with neighboring pixels)
1.5) Benchmark

2) OpenCV
Pseudo code here should maybe be replaced by what is the main method used from opencv and describe what the parameters do (for the ones we know)
Give explanations based on the first version (for computer generated images), and then make a dedicated section explaning the differences for the whiteboard images
1.1) Detecting circles
1.2) Detecting edges
1.3) Detecting connections (especially, the idea to extend edges a bit so that they got into the vertices
1.4) Benchmark


Conclusion:
Main focus: advantage/disadvantage of homemade vs. opencv and their respective limitations (but maybe the limitations should be moved in the technical part ? Not sure, depends on the space it takes)
